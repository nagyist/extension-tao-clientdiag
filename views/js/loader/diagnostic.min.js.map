{"version":3,"mappings":"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","names":["loaderScript","configUrl","bundle","loadController","controllerOptions","controllerPath","params","window","controller","document","startController","bundles","require","define","Math","name","Number","getValue","values","min","max","count","sum","list","average","sum2","variance","middle","median","results","decimals","_","omit","defaults","value","messages","Array","level","options","testPercentage","globalPercentage","status","percentage","quality","thresholds","feedback","step","len","qtiJsonFile","urlTokens","extension","fullpath","baseUrl","loader","renderer","item","$container","end","duration","result","id","url","done","_second","_defaultTimeout","_defaultOccurrencesCount","_defaultSamples","_defaults","optimal","threshold","_thresholds","message","type","_messages","title","performancesMin","performancesMax","performancesAverage","_sampleBaseId","initConfig","labels","idx","_samples","timeout","nb","start","tests","cb","iterations","async","measures","summary","getSummary","getFeedback","range","timeoutId","request","clearTimeout","bytes","seconds","speed","file","size","_kilo","_mega","unit","ideal","minimumGlobalPercentage","feedbackThresholds","fallbackThreshold","_downloadData","legend","bandwidthMin","bandwidthMax","bandwidthAverage","resultsBySize","avgResult","bandwidthUnit","maxTestTakers","getStatusOptions","baseBandwidth","stable","resultBySize","text","possible","str","data","upload","xhr","startTime","time","loaded","uploadAvg","uploadMax","totalSpeed","maxSpeed","avgSpeed","avg","navigator","screen","e","f","toString","substring","browserVersionAction","browserVersionController","browserVersionExtension","config","win","logger","action","browserslistUrl","_placeHolders","CURRENT_BROWSER","CURRENT_OS","browser","os","unknown","currentDevice","currentOS","currentBrowser","currentVersion","map","flatten","some","fetchBrowserList","getPlatformInfo","catch","browserVersion","osVersion","isMobile","then","checkBrowserSupport","Object","method","noToken","success","replace","currentOs","buffer","helper","stack1","escapeExpression","helpers","$","__","component","loggerFactory","store","requestData","dialogAlert","urlHelper","performancesTester","bandwidthTester","uploadTester","browserTester","getStatus","getConfig","mainTpl","resultTpl","detailsTpl","feedbackTpl","qualityBarTpl","header","info","button","actionStore","actionSchool","actionDropId","storeAllRuns","configurableText","diagnostic","changeStatus","getCustomMsg","key","addCustomFeedbackMsg","msg","hasFailed","addResult","$main","$result","$indicator","left","cleanUp","enable","disable","prepare","finish","deleteIdentifier","run","information","scores","testers","customInput","doRun","processTester","tester","processFailure","testerId","testerConfig","total","getCustomInput","vars","setTemplate","on","$control","state","runDiagnostics","launch","getControl","requestSchoolName","componentConfig","school_name","school_number","manageSchoolProperties","toggleControl","find","fieldName","shouldStart","toggleStart","toggleFields","storage","setInputValue","fields","validate","response","$start","$status","$results","$btn","$details"],"sources":["../../loader/bootstrap.js","../tools/fixedDecimals.js","../tools/stats.js","../tools/getConfig.js","../tools/getLabels.js","../tools/getStatus.js","../tools/performances/tester.js","../tools/bandwidth/tester.js","../tools/upload/tester.js","../tools/getPlatformInfo.js","../tools/browser/tester.js","../tools/diagnostic/tpl/main!tpl","../tools/diagnostic/tpl/result!tpl","../tools/diagnostic/tpl/details!tpl","../tools/diagnostic/tpl/feedback!tpl","tpl!taoClientDiagnostic/tools/diagnostic/tpl/quality-bar","../../taoClientDiagnosticCss/diagnostics!css","../tools/diagnostic/diagnostic.js","onLayerEnd0.js","module-create.js","/github/workspace/tao/views/build/config-wrap-end-default.js"],"sourcesContent":["/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016-2018 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Bootstrap the app, start the entry controller\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\n(function(){\n    'use strict';\n\n\n\n    var loaderScript = document.getElementById('amd-loader');\n    var configUrl = loaderScript.getAttribute('data-config');\n    var bundle  = loaderScript.getAttribute('data-bundle');\n\n    var loadController = function loadController(){\n        var controllerOptions = {};\n        var controllerPath = loaderScript.getAttribute('data-controller');\n        var params = loaderScript.getAttribute('data-params');\n        try{\n            controllerOptions = JSON.parse(params);\n        } catch(err){\n            controllerOptions = {};\n        }\n        window.require([controllerPath], function(controller) {\n            var startController = function startController(){\n                if(!window.started){\n                    window.started = true;\n                    controller.start(controllerOptions);\n                }\n            };\n            document.addEventListener('readystatechange', startController, false);\n            if (document.readyState === 'complete') {\n                startController();\n            }\n        });\n    };\n\n    //always start to load the config\n    window.require([configUrl], function() {\n\n        //define the global loading mechanism\n        if(!window.loadBundles){\n            //keep tracl of loaded bundles, even if require does it,\n            //this prevent some unecessary cycles\n            window.loaded = {};\n\n            /**\n             * Loading entry point for inter bundle dependency,\n             * always take the bundles from the params and window.bundles\n             * @param {String[]} [bundles] - an optional list of bundle to load\n             */\n            window.loadBundles = function loadBundles(bundles){\n                bundles = bundles || [];\n                bundles = bundles.concat(window.bundles)\n                bundles = bundles.filter( function(item, index){\n                    return item && bundles.indexOf(item) === index && window.loaded[item] !== true;\n                });\n                require(bundles, function(){\n                    bundles.forEach( function( item ) {\n                        window.loaded[item] = true;\n                    });\n                    loadController();\n                });\n            }\n        }\n\n        if(bundle || (window.bundles && window.bundles.length)) {\n            window.loadBundles([bundle]);\n        } else {\n            loadController();\n        }\n    });\n})();\n\ndefine(\"loader/bootstrap\", function(){});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015-2021 (original work) Open Assessment Technologies SA ;\n */\ndefine('taoClientDiagnostic/tools/fixedDecimals',[],function() {\n    'use strict';\n\n    /**\n     * Rounds a value to a fixed number of decimals\n     * @param {number} value - The value to round\n     * @param {number} decimals - The number of decimal\n     * @returns {number}\n     */\n    return function fixedDecimals(value, decimals) {\n        const shift = Math.pow(10, Math.abs(decimals || 1));\n        return Math.round(Number(value) * shift) / shift || 0;\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015-2021 (original work) Open Assessment Technologies SA ;\n */\ndefine('taoClientDiagnostic/tools/stats',['lodash', 'taoClientDiagnostic/tools/fixedDecimals'], function(_, fixedDecimals) {\n    'use strict';\n\n    /**\n     * Gets a getter function that extracts a value from a record.\n     * @param {string|Function} name - the name to extract from the record, or a getter function\n     * @returns {Function}\n     * @private\n     */\n    function valueGetter(name) {\n        if ('function' === typeof name) {\n            return name;\n        }\n\n        return item => (item && item[name]) || 0;\n    }\n\n    /**\n     * Computes some stats on a list from a particular field\n     * @param {Array|object} list - The list to compute stats on\n     * @param {string|Function} fieldName - The name of the field to process, or a callback method returning the value\n     * @param {number} [decimals] - Optional number of fixed decimals for values\n     * @returns {object}\n     */\n    return function stats(list, fieldName, decimals) {\n        const getValue = valueGetter(fieldName);\n        const values = [];\n        let min = Number.MAX_VALUE;\n        let max = 0;\n        let count = 0;\n\n        // process first pass stats: compute sum, min and max values\n        const sum = _.reduce(\n            list,\n            (sum, item) => {\n                if ('undefined' !== typeof item) {\n                    const value = getValue(item);\n                    values.push(value);\n                    min = Math.min(min, value);\n                    max = Math.max(max, value);\n                    sum += value;\n                    count++;\n                    return sum;\n                }\n            },\n            0\n        );\n\n        // compute the average value\n        const average = sum / (count || 1);\n\n        // process second pass stats: compute variance\n        const sum2 = values.reduce((sum, value) => {\n            const diff = value - average;\n            sum += diff * diff;\n            return sum;\n        }, 0);\n\n        // compute standard variance\n        const variance = count > 1 ? Math.sqrt(sum2 / (count - 1)) : 0;\n\n        // compute the median value\n        values.sort();\n        const middle = count / 2;\n        const median = (values[Math.floor(middle)] + values[Math.ceil(middle)]) / 2;\n\n        const results = {\n            min,\n            max,\n            sum,\n            count,\n            average,\n            median,\n            variance\n        };\n\n        if (decimals) {\n            _.forEach(results, (value, key) => {\n                results[key] = fixedDecimals(value, decimals);\n            });\n        }\n\n        results.values = list;\n        return results;\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016-2021 (original work) Open Assessment Technologies SA ;\n */\ndefine('taoClientDiagnostic/tools/getConfig',['lodash'], function(_) {\n    'use strict';\n\n    /**\n     * Gets a config set\n     * @param {object} [config]\n     * @param {object} [defaults]\n     * @returns {object}\n     */\n    return function getConfig(config, defaults) {\n        return _(config || {})\n            .omit(value => value === null || typeof value === 'undefined')\n            .defaults(defaults || {})\n            .value();\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017-2021 (original work) Open Assessment Technologies SA ;\n */\ndefine('taoClientDiagnostic/tools/getLabels',[],function() {\n    'use strict';\n\n    /**\n     * Gets the list of messages related to a particular level.\n     * The level is provided as a numeric value, starting from 1.\n     * @param {Array|object} messages - The list of messages for all levels.\n     *                                  If only one object is provided is will be wrapped into an array\n     * @param {number|string} level - The level for which filter the messages.\n     *                                It should be comprised within the available indexes.\n     *                                Higher levels will be reduced to the higher available,\n     *                                lower levels will be increased to the lowest.\n     * @returns {object}\n     */\n    return function getLabels(messages, level) {\n        messages = messages || {};\n\n        if (!Array.isArray(messages)) {\n            messages = [messages];\n        }\n\n        // Compute the level value that targets which list of labels to use.\n        // It should be comprised within the available indexes.\n        // Higher levels will be reduced to the higher available, lower levels will be increased to the lowest.\n        level = Math.min(Math.max(parseInt(level, 10) || 0, 1), messages.length || 1) - 1;\n\n        return messages[level] || {};\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016-2021 (original work) Open Assessment Technologies SA ;\n */\ndefine('taoClientDiagnostic/tools/getStatus',['lodash'], function(_) {\n    'use strict';\n\n    /**\n     * Gets the correct status message for a given percentage from a list of thresholds.\n     * @param {number|string} percentage - The actual percentage. Must be comprised between 0 and 100.\n     *                                     Other values will be adjusted to fit the interval.\n     * @param {Array|object} [thresholds] - A list of descriptors for each thresholds.\n     *                                      A threshold field must be provided for each.\n     * @param {object} [opts]\n     * @param {object} [minimumGlobalPercentage] - lowest value that will be used in the global score computation\n     * @returns {object} Returns the corresponding threshold, or an empty object if none match.\n     */\n    return function getStatus(percentage, thresholds, opts) {\n        const options = opts || {};\n        const testPercentage = Math.max(0, Math.min(100, Math.round(parseInt(percentage, 10) || 0)));\n        const globalPercentage = options.minimumGlobalPercentage\n            ? Math.max(testPercentage, options.minimumGlobalPercentage)\n            : testPercentage;\n\n        // need a structure compatible with the handlebars template\n        const status = {\n            // the percentage is between 0 and 100 and obviously must be a number\n            percentage: testPercentage,\n            globalPercentage: globalPercentage,\n            quality: {}\n        };\n\n        // grab a feedback related to the percentage in the thresholds list\n        if (thresholds) {\n            if (!Array.isArray(thresholds)) {\n                thresholds = [thresholds];\n            }\n\n            let feedback;\n            const len = thresholds.length;\n            for (let i = 0; i < len; i++) {\n                const step = thresholds[i];\n                if (step && (!step.threshold || status.percentage >= step.threshold)) {\n                    feedback = step;\n                } else {\n                    break;\n                }\n            }\n\n            if (feedback) {\n                status.feedback = _.clone(feedback);\n            }\n        }\n\n        return status;\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015-2021 (original work) Open Assessment Technologies SA ;\n */\ndefine('taoClientDiagnostic/tools/performances/tester',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'async',\n    'context',\n    'helpers',\n    'taoClientDiagnostic/tools/stats',\n    'taoQtiItem/qtiItem/core/Loader',\n    'taoQtiItem/qtiCommonRenderer/renderers/Renderer',\n    'taoClientDiagnostic/tools/getConfig',\n    'taoClientDiagnostic/tools/getLabels',\n    'taoClientDiagnostic/tools/getStatus'\n], function($, _, __, async, context, helpers, stats, Loader, Renderer, getConfig, getLabels, getStatus) {\n    'use strict';\n\n    /**\n     * Duration of one second (in milliseconds)\n     * @type {number}\n     * @private\n     */\n    const _second = 1000;\n\n    /**\n     * Default timeout duration\n     * @type {number}\n     * @private\n     */\n    const _defaultTimeout = 30 * _second;\n\n    /**\n     * Default number of renderings by samples\n     * @type {number}\n     * @private\n     */\n    const _defaultOccurrencesCount = 10;\n\n    /**\n     * List of default samples\n     * @type {Array}\n     * @private\n     */\n    const _defaultSamples = [\n        'taoClientDiagnostic/tools/performances/data/sample1/',\n        'taoClientDiagnostic/tools/performances/data/sample2/',\n        'taoClientDiagnostic/tools/performances/data/sample3/'\n    ];\n\n    /**\n     * Default values for the performances tester\n     * @type {object}\n     * @private\n     */\n    const _defaults = {\n        id: 'performances',\n\n        // The threshold for optimal performances\n        optimal: 0.025,\n\n        // The threshold for minimal performances\n        threshold: 0.25\n    };\n\n    /**\n     * A list of thresholds for performances check\n     * @type {Array}\n     * @private\n     */\n    const _thresholds = [\n        {\n            threshold: 0,\n            message: __('Very slow performances'),\n            type: 'error'\n        },\n        {\n            threshold: 33,\n            message: __('Average performances'),\n            type: 'warning'\n        },\n        {\n            threshold: 66,\n            message: __('Good performances'),\n            type: 'success'\n        }\n    ];\n\n    /**\n     * List of translated texts per level.\n     * The level is provided through the config as a numeric value, starting from 1.\n     * @type {object}\n     * @private\n     */\n    const _messages = [\n        // level 1\n        {\n            title: __('Workstation performances'),\n            status: __('Checking the performances...'),\n            performancesMin: __('Minimum rendering time'),\n            performancesMax: __('Maximum rendering time'),\n            performancesAverage: __('Average rendering time')\n        }\n    ];\n\n    /**\n     * Base text used to build sample identifiers\n     * @type {string}\n     * @private\n     */\n    const _sampleBaseId = 'sample';\n\n    /**\n     * Loads a page inside a div and compute the time to load\n     * @param {object} data The descriptor of the page to load\n     * @param {Function} done A callback function called to provide the result\n     * @private\n     */\n    function loadItem(data, done) {\n        //item location config\n        const qtiJsonFile = `${data.url}qti.json`;\n        const urlTokens = data.url.split('/');\n        const extension = urlTokens[0];\n        const fullpath = require.s.contexts._.config.paths[extension];\n        const baseUrl = data.url.replace(extension, fullpath);\n        const loader = new Loader();\n        const renderer = new Renderer({\n            baseUrl: baseUrl // compatibility mode for legacy installations\n        });\n\n        // check needed by compatibility mode for legacy installations\n        if (renderer.getAssetManager) {\n            renderer.getAssetManager().setData('baseUrl', baseUrl);\n        }\n\n        require([`json!${qtiJsonFile}`], function(itemData) {\n            loader.loadItemData(itemData, function(item) {\n                renderer.load(function() {\n                    //start right before rendering\n                    const start = window.performance.now();\n\n                    //set renderer\n                    item.setRenderer(this);\n\n                    //render markup\n                    const $container = $('<div>').appendTo('body');\n                    $container.append(item.render());\n\n                    //execute javascript\n                    item.postRender();\n\n                    //remove item\n                    $container.remove();\n\n                    //done\n                    const end = window.performance.now();\n\n                    const duration = (end - start) / _second;\n\n                    const result = {\n                        id: data.id,\n                        url: data.url,\n                        duration: duration\n                    };\n\n                    done(null, result);\n                }, this.getLoadedClasses());\n            });\n        });\n    }\n\n    /**\n     * Performs a browser performances test by running a heavy page\n     *\n     * @param {object} config - Some optional configs\n     * @param {string} [config.id] - The identifier of the test\n     * @param {number} [config.optimal] - The threshold for optimal performances\n     * @param {number} [config.threshold] - The threshold for minimal performances\n     * @param {string} [config.level] - The intensity level of the test. It will aim which messages list to use.\n     * @returns {object}\n     */\n    return function performancesTester(config) {\n        const initConfig = getConfig(config, _defaults);\n        const labels = getLabels(_messages, initConfig.level);\n        let idx = 0;\n        const _samples = _.map((!_.isEmpty(initConfig.samples) && initConfig.samples) || _defaultSamples, sample => {\n            idx++;\n            return {\n                id: _sampleBaseId + idx,\n                url: sample,\n                timeout: initConfig.timeout * 1000 || _defaultTimeout,\n                nb: initConfig.occurrences || _defaultOccurrencesCount\n            };\n        });\n\n        // add one occurrence on the first sample to obfuscate the time needed to load the runner\n        _samples[0].nb++;\n\n        return {\n            /**\n             * Performs a performances test, then call a function to provide the result\n             * @param {Function} done\n             */\n            start(done) {\n                const tests = [];\n\n                _.forEach(_samples, data => {\n                    const cb = _.partial(loadItem, data);\n                    let iterations = data.nb || 1;\n                    while (iterations--) {\n                        tests.push(cb);\n                    }\n                });\n\n                async.series(tests, (err, measures) => {\n                    const decimals = 2;\n\n                    if (err && !measures.length) {\n                        //something went wrong\n                        throw err;\n                    }\n\n                    // remove the first result to obfuscate the time needed to load the runner\n                    measures.shift();\n\n                    const results = stats(measures, 'duration', decimals);\n                    const status = this.getFeedback(results.average);\n                    const summary = this.getSummary(results);\n\n                    done(status, summary, results);\n                });\n            },\n\n            /**\n             * Gets the labels loaded for the tester\n             * @returns {object}\n             */\n            get labels() {\n                return labels;\n            },\n\n            /**\n             * Builds the results summary\n             * @param {object} results\n             * @returns {object}\n             */\n            getSummary(results) {\n                return {\n                    performancesMin: { message: labels.performancesMin, value: `${results.min} s` },\n                    performancesMax: { message: labels.performancesMax, value: `${results.max} s` },\n                    performancesAverage: { message: labels.performancesAverage, value: `${results.average} s` }\n                };\n            },\n\n            /**\n             * Gets the feedback status for the provided result value\n             * @param {Number} result\n             * @returns {object}\n             */\n            getFeedback(result) {\n                const optimal = initConfig.optimal;\n                const range = Math.abs(optimal - initConfig.threshold);\n                const status = getStatus(((range + optimal - result) / range) * 100, _thresholds);\n\n                status.title = labels.title;\n                status.id = initConfig.id;\n                return status;\n            }\n        };\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015-2021 (original work) Open Assessment Technologies SA ;\n */\ndefine('taoClientDiagnostic/tools/bandwidth/tester',[\n    'lodash',\n    'i18n',\n    'async',\n    'context',\n    'taoClientDiagnostic/tools/getConfig',\n    'taoClientDiagnostic/tools/getLabels',\n    'taoClientDiagnostic/tools/stats',\n    'taoClientDiagnostic/tools/fixedDecimals',\n    'taoClientDiagnostic/tools/getStatus'\n], function(_, __, async, context, getConfig, getLabels, stats, fixedDecimals, getStatus) {\n    'use strict';\n\n    /**\n     * A binary kilo bytes (KiB)\n     * @type {number}\n     * @private\n     */\n    const _kilo = 1024;\n\n    /**\n     * A binary mega bytes (MiB)\n     * @type {number}\n     * @private\n     */\n    const _mega = _kilo * _kilo;\n\n    /**\n     * Duration of one second (in milliseconds)\n     * @type {number}\n     * @private\n     */\n    const _second = 1000;\n\n    /**\n     * A list of thresholds for bandwidth check\n     * @type {Array}\n     * @private\n     */\n    const _thresholds = [\n        {\n            threshold: 0,\n            message: __('Low bandwidth'),\n            type: 'error'\n        },\n        {\n            threshold: 33,\n            message: __('Average bandwidth'),\n            type: 'warning'\n        },\n        {\n            threshold: 66,\n            message: __('Good bandwidth'),\n            type: 'success'\n        }\n    ];\n\n    /**\n     * Default values for the bandwidth tester\n     * @type {object}\n     * @private\n     */\n    const _defaults = {\n        id: 'bandwidth',\n\n        // The typical bandwidth needed for a test taker (Mbps)\n        unit: 0.16,\n\n        // The thresholds for optimal bandwidth\n        ideal: 45,\n\n        // Maximum number of test takers to display\n        max: 100,\n\n        // Lowest value that will be used in the global score computation\n        minimumGlobalPercentage: false,\n\n        // A list of thresholds for bandwidth check\n        feedbackThresholds: _thresholds,\n\n        fallbackThreshold: 0.2\n    };\n\n    /**\n     * List of descriptors defining the data sets to download.\n     * - file : path of the file containing the test data\n     * - size : the given size of the file\n     * - timeout : the timeout for the download\n     * - threshold : a bandwidth threshold above which the data set can be downloaded to evaluate a more accurate value\n     * - nb : number of download iterations\n     * @type {object}\n     * @private\n     */\n    const _downloadData = {\n        '10KB': {\n            id: '10KB',\n            file: 'data/bin10KB.data',\n            size: 10 * _kilo,\n            timeout: _second,\n            threshold: 0,\n            nb: 10\n        },\n        '100KB': {\n            id: '100KB',\n            file: 'data/bin100KB.data',\n            size: 100 * _kilo,\n            timeout: 2 * _second,\n            threshold: 0,\n            nb: 5\n        },\n        '1MB': {\n            id: '1MB',\n            file: 'data/bin1MB.data',\n            size: _mega,\n            timeout: 20 * _second,\n            threshold: 0,\n            nb: 3\n        }\n    };\n\n    /**\n     * List of translated texts per level.\n     * The level is provided through the config as a numeric value, starting from 1.\n     * @type {object[]}\n     * @private\n     */\n    const _messages = [\n        // level 1\n        {\n            title: __('Bandwidth'),\n            status: __('Checking the bandwidth...'),\n            legend: __('Number of simultaneous test takers the connection can handle'),\n            bandwidthMin: __('Minimum bandwidth'),\n            bandwidthMax: __('Maximum bandwidth'),\n            bandwidthAverage: __('Average bandwidth')\n        },\n        // level 2\n        {\n            title: __('Media intensive bandwidth'),\n            status: __('Checking the media intensive bandwidth...'),\n            legend: __('Number of simultaneous test takers the connection can handle with media intensive'),\n            bandwidthMin: __('Minimum intensive bandwidth'),\n            bandwidthMax: __('Maximum intensive bandwidth'),\n            bandwidthAverage: __('Average intensive bandwidth')\n        }\n    ];\n\n    /**\n     * Download a data set as described by the provided descriptor and compute the duration.\n     * @param {object} data The data set descriptor to use for download\n     * @param {Function} cb A callback function called at the end of the download.\n     * This callback is also called if a timeout breaks the download;\n     * @private\n     */\n    function download(data, cb) {\n        if (data.threshold && this.bandwidth < data.threshold) {\n            return cb('threshold');\n        }\n\n        const start = window.performance.now();\n        const url = `${context['root_url']}taoClientDiagnostic/views/js/tools/bandwidth/${data.file}?${Date.now()}`;\n        const timeoutId = window.setTimeout(cb, data.timeout, 'timeout');\n        const request = new XMLHttpRequest();\n        request.open('GET', url, true);\n        request.setRequestHeader('Accept', 'application/octet-stream');\n\n        request.onload = () => {\n            const end = window.performance.now();\n            clearTimeout(timeoutId);\n\n            const duration = end - start;\n            const bytes = data.size;\n            const seconds = duration / _second;\n\n            // speed in Mbps\n            const speed = (bytes * 8) / seconds / _mega;\n\n            this.bandwidth = Math.max(this.bandwidth, speed);\n\n            return cb(null, {\n                id: data.id,\n                file: data.file,\n                size: data.size,\n                duration,\n                speed\n            });\n        };\n        request.onerror = err => {\n            clearTimeout(timeoutId);\n            cb(err);\n        };\n\n        request.onreadystatechange = () => {\n            if (request.readyState === 4 && request.status !== 200) {\n                clearTimeout(timeoutId);\n                cb(request.status);\n            }\n        };\n\n        request.send();\n    }\n\n    /**\n     * Performs a bandwidth test by downloading a bunch of data sets with different sizes\n     *\n     * @param {object} config - Some optional configs\n     * @param {string} [config.id] - The identifier of the test\n     * @param {number} [config.unit] - The typical bandwidth needed for a test taker (Mbps)\n     * @param {number} [config.ideal] - The thresholds for optimal bandwidth\n     * @param {number} [config.max] - Maximum number of test takers to display\n     * @param {string} [config.level] - The intensity level of the test. It will aim which messages list to use.\n     * @returns {object}\n     */\n    return function bandwidthTester(config) {\n        const initConfig = getConfig(config, _defaults);\n        const labels = getLabels(_messages, initConfig.level);\n\n        // override the feedback thresholds given by the config in case it is an empty array\n        if (_.isArray(initConfig.feedbackThresholds) && !initConfig.feedbackThresholds.length) {\n            initConfig.feedbackThresholds = _thresholds;\n        }\n\n        return {\n            /**\n             * Performs a bandwidth test, then call a function to provide the result\n             * @param {Function} done\n             */\n            start(done) {\n                const tests = [];\n\n                _.forEach(_downloadData, data => {\n                    const cb = download.bind(this, data);\n                    let iterations = data.nb || 1;\n                    while (iterations--) {\n                        tests.push(cb);\n                    }\n                });\n\n                this.bandwidth = 0;\n\n                async.series(tests, (err, measures) => {\n                    let duration = 0;\n                    let size = 0;\n                    const decimals = 2;\n                    const resultsBySize = {};\n\n                    function getValue(value) {\n                        let speed = 0;\n\n                        if (value) {\n                            duration += value.duration;\n                            size += value.size;\n\n                            speed = value.speed;\n                            value.speed = fixedDecimals(speed, decimals);\n                        }\n\n                        return speed;\n                    }\n\n                    if (err && !measures.length) {\n                        //something went wrong\n                        throw err;\n                    }\n                    const results = stats(measures, getValue, decimals);\n\n                    _.forEach(_downloadData, (data, key) => {\n                        resultsBySize[key] = stats(\n                            _.filter(measures, o => o.id === key),\n                            getValue,\n                            decimals\n                        );\n                    });\n\n                    results.duration = fixedDecimals(duration / _second, decimals);\n                    results.size = size;\n\n                    const summary = this.getSummary(results);\n                    const status = this.getFeedback(results, resultsBySize);\n\n                    done(status, summary, results);\n                });\n            },\n\n            /**\n             * Gets the labels loaded for the tester\n             * @returns {object}\n             */\n            get labels() {\n                return labels;\n            },\n\n            /**\n             * Builds the results summary\n             * @param {object} results\n             * @returns {object}\n             */\n            getSummary(results) {\n                return {\n                    bandwidthMin: { message: labels.bandwidthMin, value: results.min + ' Mbps' },\n                    bandwidthMax: { message: labels.bandwidthMax, value: results.max + ' Mbps' },\n                    bandwidthAverage: { message: labels.bandwidthAverage, value: results.average + ' Mbps' }\n                };\n            },\n\n            /**\n             * Gets the feedback status for the provided result value\n             * @param {object} result\n             * @param {number} result.max\n             * @param {number} result.min\n             * @param {number} result.average\n             * @param {object} resultsBySize - result statistics grouped by size\n             * @returns {object}\n             */\n            getFeedback(result, resultsBySize) {\n                const avgResult = result.average;\n                const bandwidthUnit = initConfig.unit;\n                const threshold = initConfig.ideal;\n                const maxTestTakers = initConfig.max;\n                const max = threshold * bandwidthUnit;\n                const getStatusOptions = initConfig.minimumGlobalPercentage\n                    ? { minimumGlobalPercentage: initConfig.minimumGlobalPercentage }\n                    : {};\n                const baseBandwidth = avgResult;\n                let stable = true;\n\n                _.forEach(resultsBySize, resultBySize => {\n                    if (resultBySize.min / resultBySize.average < initConfig.fallbackThreshold) {\n                        stable = false;\n                    }\n                });\n\n                const status = getStatus((baseBandwidth / max) * 100, initConfig.feedbackThresholds, getStatusOptions);\n\n                let nb = Math.floor(baseBandwidth / bandwidthUnit);\n\n                if (nb > maxTestTakers) {\n                    nb = '>' + maxTestTakers;\n                }\n\n                status.id = initConfig.id;\n                status.title = labels.title;\n                status.feedback.legend = labels.legend;\n                status.quality.label = nb;\n\n                if (!stable) {\n                    status.feedback.type = 'warning';\n                    status.feedback.message = __(\n                        'Unstable bandwidth, temporary fluctuations in connection speed may affect test taker experience.'\n                    );\n                    status.feedback.legend = __('Simultaneous test takers under normal connection conditions.');\n                }\n\n                if (nb.toString().length > 2) {\n                    status.quality.wide = true;\n                }\n\n                return status;\n            }\n        };\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016-2021 (original work) Open Assessment Technologies SA ;\n */\ndefine('taoClientDiagnostic/tools/upload/tester',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'async',\n    'util/url',\n    'taoClientDiagnostic/tools/getConfig',\n    'taoClientDiagnostic/tools/getLabels',\n    'taoClientDiagnostic/tools/getStatus'\n], function($, _, __, async, urlHelper, getConfig, getLabels, getStatus) {\n    'use strict';\n\n    /**\n     * A binary kilo bytes (KiB)\n     * @type {number}\n     * @private\n     */\n    const _kilo = 1024;\n\n    /**\n     * A binary mega bytes (MiB)\n     * @type {number}\n     * @private\n     */\n    const _mega = _kilo * _kilo;\n\n    /**\n     * Result of diagnostic\n     * @type {Array}\n     * @private\n     */\n    let data = [];\n\n    /**\n     * Default values for the upload speed tester\n     * @type {object}\n     * @private\n     */\n    const _defaults = {\n        id: 'upload',\n\n        // Size of data to sent to server during speed test in bytes\n        size: _mega,\n\n        // Optimal speed in bytes per second\n        optimal: _mega\n    };\n\n    /**\n     * A list of thresholds for bandwidth check\n     * @type {Array}\n     * @private\n     */\n    const _thresholds = [\n        {\n            threshold: 0,\n            message: __('Low upload speed'),\n            type: 'error'\n        },\n        {\n            threshold: 33,\n            message: __('Average upload speed'),\n            type: 'warning'\n        },\n        {\n            threshold: 66,\n            message: __('Good upload speed'),\n            type: 'success'\n        }\n    ];\n\n    /**\n     * List of translated texts per level.\n     * The level is provided through the config as a numeric value, starting from 1.\n     * @type {object}\n     * @private\n     */\n    const _messages = [\n        // level 1\n        {\n            title: __('Upload speed'),\n            status: __('Checking upload speed...'),\n            uploadAvg: __('Average upload speed'),\n            uploadMax: __('Max upload speed')\n        }\n    ];\n\n    /**\n     * Generate random string of given length\n     * @param {number} length\n     */\n    function generateStr(length) {\n        let text = '';\n        const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n        for (let i = 0; i < length; i++) {\n            text += possible.charAt(Math.floor(Math.random() * possible.length));\n        }\n\n        return text;\n    }\n\n    /**\n     * Upload generated string to check upload speed.\n     * @param {number} size of string to upload in bytes\n     * @return {object} jqXHR\n     */\n    function upload(size) {\n        const url = urlHelper.route('upload', 'CompatibilityChecker', 'taoClientDiagnostic', { cache: Date.now() });\n        const str = generateStr(size);\n        data = [];\n\n        return $.ajax({\n            url: url,\n            type: 'POST',\n            data: {\n                upload: str\n            },\n            xhr: () => {\n                const xhr = new window.XMLHttpRequest();\n                const startTime = Date.now();\n                // Upload progress\n                xhr.upload.addEventListener(\n                    'progress',\n                    evt => {\n                        if (evt.lengthComputable) {\n                            const passedTime = Date.now() - startTime;\n                            data.push({\n                                time: passedTime,\n                                loaded: evt.loaded,\n                                speed: (evt.loaded * 8) / _mega / (passedTime / 1000)\n                            });\n                        }\n                    },\n                    false\n                );\n\n                return xhr;\n            }\n        });\n    }\n\n    /**\n     * Performs a upload speed test\n     * @param {object} config - Some optional configs\n     * @param {string} [config.id] - The identifier of the test\n     * @param {number} [config.size] - Size of data to sent to server during speed test in bytes\n     * @param {number} [config.optimal] - Optimal speed in bytes per second\n     * @param {string} [config.level] - The intensity level of the test. It will aim which messages list to use.\n     * @returns {object}\n     */\n    return function uploadTester(config) {\n        const initConfig = getConfig(config, _defaults);\n        const labels = getLabels(_messages, initConfig.level);\n\n        return {\n            /**\n             * Performs upload speed test, then call a function to provide the result\n             * @param {Function} done\n             */\n            start(done) {\n                upload(parseInt(initConfig.size, 10)).then(() => {\n                    let totalSpeed = 0;\n                    let maxSpeed = 0;\n\n                    _.forEach(data, val => {\n                        totalSpeed += val.speed;\n                        if (maxSpeed < val.speed) {\n                            maxSpeed = Math.round(val.speed * 100) / 100;\n                        }\n                    });\n                    const avgSpeed = Math.round((totalSpeed / data.length) * 100) / 100;\n                    const results = {\n                        max: maxSpeed,\n                        avg: avgSpeed,\n                        type: 'upload'\n                    };\n\n                    const status = this.getFeedback(avgSpeed);\n                    const summary = this.getSummary(results);\n\n                    done(status, summary, results);\n                });\n            },\n\n            /**\n             * Gets the labels loaded for the tester\n             * @returns {object}\n             */\n            get labels() {\n                return labels;\n            },\n\n            /**\n             * Builds the results summary\n             * @param {object} results\n             * @returns {object}\n             */\n            getSummary(results) {\n                return {\n                    uploadAvg: { message: labels.uploadAvg, value: `${results.avg} Mbps` },\n                    uploadMax: { message: labels.uploadMax, value: `${results.max} Mbps` }\n                };\n            },\n\n            /**\n             * Gets the feedback status for the provided result value\n             * @param {number} result\n             * @returns {object}\n             */\n            getFeedback(result) {\n                const optimal = initConfig.optimal / _mega;\n                const status = getStatus((100 / optimal) * result, _thresholds);\n\n                status.id = initConfig.id;\n                status.title = labels.title;\n\n                return status;\n            }\n        };\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016-2021 (original work) Open Assessment Technologies SA ;\n */\ndefine('taoClientDiagnostic/tools/getPlatformInfo',['core/request', 'util/url', 'taoClientDiagnostic/tools/getConfig'], function(request, urlHelper, getConfig) {\n    'use strict';\n\n    /**\n     * Some default values\n     * @type {object}\n     * @private\n     */\n    const defaultConfig = {\n        browserVersionAction: 'whichBrowser',\n        browserVersionController: 'CompatibilityChecker',\n        browserVersionExtension: 'taoClientDiagnostic'\n    };\n\n    /**\n     * Gets the URL of the platform tester\n     * @param {Window} win\n     * @param {string} action\n     * @param {string} controller\n     * @param {string} extension\n     * @returns {string}\n     * @private\n     */\n    function getTesterUrl(win, action, controller, extension) {\n        const document = win.document;\n        const navigator = win.navigator;\n        const screen = win.screen;\n        const params = {};\n        let e = 0;\n        let f = 0;\n\n        // append the browser user agent\n        params.ua = navigator.userAgent;\n\n        // detect browser family\n        e |= win.ActiveXObject ? 1 : 0;\n        e |= win.opera ? 2 : 0;\n        e |= win.chrome ? 4 : 0;\n        e |= 'getBoxObjectFor' in document || 'mozInnerScreenX' in win ? 8 : 0;\n        e |=\n            'WebKitCSSMatrix' in win || 'WebKitPoint' in win || 'webkitStorageInfo' in win || 'webkitURL' in win\n                ? 16\n                : 0;\n        e |= e & 16 && {}.toString.toString().indexOf('\\n') === -1 ? 32 : 0;\n        params.e = e;\n\n        // gather info about browser functionality\n        f |= 'sandbox' in document.createElement('iframe') ? 1 : 0;\n        f |= 'WebSocket' in win ? 2 : 0;\n        f |= win.Worker ? 4 : 0;\n        f |= win.applicationCache ? 8 : 0;\n        f |= win.history && win.history.pushState ? 16 : 0;\n        f |= document.documentElement.webkitRequestFullScreen ? 32 : 0;\n        f |= 'FileReader' in win ? 64 : 0;\n        params.f = f;\n\n        // append a unique ID\n        params.r = Math.random()\n            .toString(36)\n            .substring(7);\n\n        // get the screen size\n        params.w = screen.width;\n        params.h = screen.height;\n\n        return urlHelper.route(action, controller, extension, params);\n    }\n\n    /**\n     * Check the user browser and os.\n     *\n     * This helper performs a server request to gather information about the user browser and os.\n     * @param {Window} window - Need an access to the window object\n     * @param {object} config\n     * @param {string} config.browserVersionAction - The name of the action to call to get the browser checker\n     * @param {string} config.browserVersionController - The name of the controller to call to get the browser checker\n     * @param {string} config.browserVersionExtension - The name of the extension containing the controller to call to get the browser checker\n     * @returns {Promise}\n     */\n    return function getPlatformInfo(win, config) {\n        config = getConfig(config, defaultConfig);\n\n        const url = getTesterUrl(\n            win,\n            config.browserVersionAction,\n            config.browserVersionController,\n            config.browserVersionExtension\n        );\n\n        return request({ url, noToken: true });\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016-2021 (original work) Open Assessment Technologies SA ;\n */\ndefine('taoClientDiagnostic/tools/browser/tester',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'util/url',\n    'core/logger',\n    'core/request',\n    'taoClientDiagnostic/tools/getConfig',\n    'taoClientDiagnostic/tools/getLabels',\n    'taoClientDiagnostic/tools/getPlatformInfo',\n    'taoClientDiagnostic/tools/getStatus'\n], function($, _, __, urlHelper, loggerFactory, request, getConfig, getLabels, getPlatformInfo, getStatus) {\n    'use strict';\n\n    /**\n     * @type {logger}\n     * @private\n     */\n    const logger = loggerFactory('taoClientDiagnostic/browser');\n\n    /**\n     * Some default values\n     * @type {object}\n     * @private\n     */\n    const _defaults = {\n        id: 'browser',\n        browserVersionAction: 'whichBrowser',\n        browserVersionController: 'CompatibilityChecker',\n        browserVersionExtension: 'taoClientDiagnostic',\n        action: 'check',\n        controller: 'DiagnosticChecker',\n        browserslistUrl: 'https://oat-sa.github.io/browserslist-app-tao/api.json'\n    };\n\n    /**\n     * Placeholder variables for custom messages\n     * @type {object}\n     * @private\n     */\n    const _placeHolders = {\n        CURRENT_BROWSER: '%CURRENT_BROWSER%',\n        CURRENT_OS: '%CURRENT_OS%'\n    };\n\n    /**\n     * List of translated texts per level.\n     * The level is provided through the config as a numeric value, starting from 1.\n     * @type {object}\n     * @private\n     */\n    const _messages = [\n        // level 1\n        {\n            title: __('Operating system and web browser'),\n            status: __('Checking the browser...'),\n            browser: __('Web browser'),\n            os: __('Operating system')\n        }\n    ];\n\n    /**\n     * Fallback name to recover from connectivity error\n     * @param {string}\n     * @private\n     */\n    const unknown = __('Unknown');\n\n    /**\n     * Performs a browser support test\n     *\n     * @param {object} config - Some optional configs\n     * @param {string} [config.id] - The identifier of the test\n     * @param {string} [config.action] - The name of the action to call to get the browser checker\n     * @param {string} [config.controller] - The name of the controller to call to get the browser checker\n     * @param {string} [config.extension] - The name of the extension containing the controller to call to get the browser checker\n     * @param {string} [config.level] - The intensity level of the test. It will aim which messages list to use.\n     * @returns {object}\n     */\n    return function browserTester(config) {\n        const initConfig = getConfig(config, _defaults);\n        const labels = getLabels(_messages, initConfig.level);\n\n        /**\n         * Fetches the list of fully supported browsers\n         * @returns {Promise<Array>}\n         * @private\n         */\n        const fetchBrowserList = () => request({ url: initConfig.browserslistUrl, noToken: true }).catch(() => []);\n\n        /**\n         * Checks the current browser against the list of fully supported browsers\n         * @param platformInfo\n         * @returns {Promise<boolean>}\n         * @private\n         */\n        function checkBrowserSupport(platformInfo) {\n            const currentDevice = platformInfo.isMobile ? 'mobile' : 'desktop';\n            const currentOS = platformInfo.os.toLowerCase();\n            const currentBrowser = platformInfo.browser.toLowerCase();\n            const currentVersion = platformInfo.browserVersion;\n            return fetchBrowserList().then(list =>\n                list.some(entry => {\n                    const { browser, device, os, versions } = entry;\n\n                    if (currentDevice !== device) {\n                        return false;\n                    }\n\n                    if (os && os.toLowerCase() !== currentOS) {\n                        return false;\n                    }\n\n                    if (browser.toLowerCase() !== currentBrowser) {\n                        return false;\n                    }\n\n                    // Using lodash because of IE support.\n                    // Some useful traversal algorithms are needed and they don't have polyfill in our bundles.\n                    // The versions come with an inconsistent format and they need to be processed upfront.\n                    return _(versions)\n                        .map(version => version.split('-'))\n                        .flatten()\n                        .value()\n                        .some(version => currentVersion.localeCompare(version, void 0, { numeric: true }) >= 0);\n                }, {})\n            );\n        }\n\n        return {\n            /**\n             * Performs a browser support test, then call a function to provide the result\n             * @param {Function} done\n             */\n            start(done) {\n                getPlatformInfo(window, initConfig)\n                    .catch(err => {\n                        logger.error(err);\n                        return {\n                            browser: unknown,\n                            browserVersion: '',\n                            os: unknown,\n                            osVersion: '',\n                            isMobile: false\n                        };\n                    })\n                    .then(platformInfo =>\n                        checkBrowserSupport(platformInfo).then(browserSupported =>\n                            Object.assign(platformInfo, { browserSupported })\n                        )\n                    )\n                    .then(platformInfo => {\n                        request({\n                            url: urlHelper.route(initConfig.action, initConfig.controller, initConfig.extension),\n                            data: platformInfo,\n                            method: 'POST',\n                            noToken: true\n                        })\n                            .catch(() => {\n                                return {\n                                    success: false,\n                                    type: 'error',\n                                    message: __('Unable to validate the data as the server did not respond in time.')\n                                };\n                            })\n                            .then(data => {\n                                const percentage = 'success' === data.type ? 100 : 'warning' === data.type ? 33 : 0;\n                                const status = this.getFeedback(percentage, data);\n                                const summary = this.getSummary(platformInfo);\n\n                                status.customMsgRenderer = customMsg => {\n                                    return (customMsg || '')\n                                        .replace(_placeHolders.CURRENT_BROWSER, summary.browser.value)\n                                        .replace(_placeHolders.CURRENT_OS, summary.os.value);\n                                };\n\n                                done(status, summary, platformInfo);\n                            });\n                    });\n            },\n\n            /**\n             * Gets the labels loaded for the tester\n             * @returns {object}\n             */\n            get labels() {\n                return labels;\n            },\n\n            /**\n             * Builds the results summary\n             * @param {object} results\n             * @returns {object}\n             */\n            getSummary(results) {\n                const currentBrowser = `${results.browser} ${results.browserVersion}`;\n                const currentOs = `${results.os} ${results.osVersion}`;\n                return {\n                    browser: {\n                        message: labels.browser,\n                        value: currentBrowser\n                    },\n                    os: {\n                        message: labels.os,\n                        value: currentOs\n                    }\n                };\n            },\n\n            /**\n             * Gets the feedback status for the provided result value\n             * @param {number} result\n             * @param {object} data\n             * @returns {object}\n             */\n            getFeedback(result, data) {\n                const status = getStatus(result, data);\n\n                status.id = initConfig.id;\n                status.title = labels.title;\n\n                return status;\n            }\n        };\n    };\n});\n\n","\ndefine('tpl!taoClientDiagnostic/tools/diagnostic/tpl/main', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"<p>\";\n  if (helper = helpers.header) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.header); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</p>\";\n  return buffer;\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"<p>\";\n  if (helper = helpers.info) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.info); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</p>\";\n  return buffer;\n  }\n\nfunction program5(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"<p>\";\n  if (helper = helpers.setup) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.setup); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</p>\";\n  return buffer;\n  }\n\nfunction program7(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += \"\\n        <p>\\n            <label for=\\\"school_id\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"School ID:\", options) : helperMissing.call(depth0, \"__\", \"School ID:\", options)))\n    + \"</label>\\n            <input type=\\\"text\\\" data-control=\\\"school_id\\\" id=\\\"school_id\\\" name=\\\"school_id\\\" maxlength=\\\"255\\\" placeholder=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"School ID\", options) : helperMissing.call(depth0, \"__\", \"School ID\", options)))\n    + \"\\\" />\\n        </p>\\n        <p>\\n            <label for=\\\"workstation\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Workstation:\", options) : helperMissing.call(depth0, \"__\", \"Workstation:\", options)))\n    + \"</label>\\n            <input type=\\\"text\\\" data-control=\\\"workstation\\\" id=\\\"workstation\\\" name=\\\"workstation\\\" maxlength=\\\"64\\\" placeholder=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Workstation name\", options) : helperMissing.call(depth0, \"__\", \"Workstation name\", options)))\n    + \"\\\" />\\n        </p>\\n        \";\n  return buffer;\n  }\n\nfunction program9(depth0,data) {\n  \n  var buffer = \"\", stack1;\n  buffer += \"\\n            \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.validateSchoolName), {hash:{},inverse:self.program(12, program12, data),fn:self.program(10, program10, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n        \";\n  return buffer;\n  }\nfunction program10(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += \"\\n        <p>\\n            <label for=\\\"school_number\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"School number:\", options) : helperMissing.call(depth0, \"__\", \"School number:\", options)))\n    + \"</label>\\n            <input type=\\\"text\\\" data-control=\\\"school_number\\\" id=\\\"school_number\\\" name=\\\"school_number\\\" maxlength=\\\"10\\\" placeholder=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"School number\", options) : helperMissing.call(depth0, \"__\", \"School number\", options)))\n    + \"\\\" />\\n        </p>\\n        <p>\\n            <label for=\\\"school_pin\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"School PIN:\", options) : helperMissing.call(depth0, \"__\", \"School PIN:\", options)))\n    + \"</label>\\n            <input type=\\\"text\\\" data-control=\\\"school_pin\\\" id=\\\"school_pin\\\" name=\\\"school_pin\\\" maxlength=\\\"4\\\" placeholder=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"School PIN code (4 digits)\", options) : helperMissing.call(depth0, \"__\", \"School PIN code (4 digits)\", options)))\n    + \"\\\" />\\n        </p>\\n            \";\n  return buffer;\n  }\n\nfunction program12(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += \"\\n        <p>\\n            <label for=\\\"school_name\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"School name:\", options) : helperMissing.call(depth0, \"__\", \"School name:\", options)))\n    + \"</label>\\n            <input type=\\\"text\\\" data-control=\\\"school_name\\\" id=\\\"school_name\\\" name=\\\"school_name\\\" maxlength=\\\"255\\\" placeholder=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"School name\", options) : helperMissing.call(depth0, \"__\", \"School name\", options)))\n    + \"\\\" />\\n        </p>\\n            \";\n  return buffer;\n  }\n\n  buffer += \"<div class=\\\"diagnostics-main-area\\\">\\n\\n    <h1>\";\n  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</h1>\\n\\n    <div class=\\\"intro\\\">\\n        \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.header), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n        \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.info), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n        \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.setup), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n        \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.requireSchoolId), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n        \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.requireSchoolName), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n    </div>\\n\\n    <div class=\\\"clearfix\\\">\\n        <button data-action=\\\"test-launcher\\\" class=\\\"btn-info small rgt\\\">\";\n  if (helper = helpers.button) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.button); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</button>\\n    </div>\\n\\n    <ul class=\\\"plain results\\\"></ul>\\n\\n    <div class=\\\"status\\\">\\n        <h2></h2>\\n    </div>\\n\\n</div>\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoClientDiagnostic/tools/diagnostic/tpl/result', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\", self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += \"\\n    <div class=\\\"clearfix\\\">\\n        <button data-action=\\\"show-details\\\" class=\\\"rgt btn-info small\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Show Details\", options) : helperMissing.call(depth0, \"__\", \"Show Details\", options)))\n    + \"</button>\\n        <button data-action=\\\"hide-details\\\" class=\\\"rgt btn-info small hidden\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Hide Details\", options) : helperMissing.call(depth0, \"__\", \"Hide Details\", options)))\n    + \"</button>\\n        <div class=\\\"details hidden\\\"></div>\\n    </div>\\n    \";\n  return buffer;\n  }\n\n  buffer += \"<li data-result=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n    <h2>\";\n  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</h2>\\n    <div class=\\\"result\\\"></div>\\n\\n    \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.details), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n</li>\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoClientDiagnostic/tools/diagnostic/tpl/details', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n                <tr><td>\";\n  if (helper = helpers.message) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.message); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</td><td>\";\n  if (helper = helpers.value) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.value); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</td></tr>\\n            \";\n  return buffer;\n  }\n\n  buffer += \"<div class=\\\"details\\\">\\n    <h2>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Details\", options) : helperMissing.call(depth0, \"__\", \"Details\", options)))\n    + \"</h2>\\n    <div>\\n        <table class=\\\"matrix\\\">\\n            <tbody>\\n            \";\n  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n            </tbody>\\n        </table>\\n    </div>\\n</div>\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoClientDiagnostic/tools/diagnostic/tpl/feedback', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"<div class=\\\"legend\\\">\";\n  if (helper = helpers.legend) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.legend); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\";\n  return buffer;\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"<div class=\\\"customMsg\\\">\";\n  if (helper = helpers.customMsg) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.customMsg); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\";\n  return buffer;\n  }\n\n  buffer += \"<div class=\\\"small feedback feedback-\";\n  if (helper = helpers.type) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.type); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n    <span class=\\\"icon icon-\";\n  if (helper = helpers.type) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.type); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\"></span>\\n    <span class=\\\"msg\\\">\";\n  if (helper = helpers.message) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.message); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n    \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.legend), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n    \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.customMsg), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n</div>\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoClientDiagnostic/tools/diagnostic/tpl/quality-bar', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  \n  return \" wide\";\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\"\";\n  return buffer;\n  }\n\n  buffer += \"<div class=\\\"quality-bar\\\">\\n    <div class=\\\"quality-indicator\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.wide), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\"\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.label), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"></div>\\n</div>\";\n  return buffer;\n  });\n});\n\n","\ndefine('css!taoClientDiagnosticCss/diagnostics',[],function(){});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016-2021 (original work) Open Assessment Technologies SA ;\n */\ndefine('taoClientDiagnostic/tools/diagnostic/diagnostic',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'async',\n    'ui/component',\n    'core/logger',\n    'core/store',\n    'core/request',\n    'core/dataProvider/request',\n    'ui/dialog/alert',\n    'ui/feedback',\n    'util/url',\n    'taoClientDiagnostic/tools/performances/tester',\n    'taoClientDiagnostic/tools/bandwidth/tester',\n    'taoClientDiagnostic/tools/upload/tester',\n    'taoClientDiagnostic/tools/browser/tester',\n    'taoClientDiagnostic/tools/getStatus',\n    'taoClientDiagnostic/tools/getConfig',\n    'tpl!taoClientDiagnostic/tools/diagnostic/tpl/main',\n    'tpl!taoClientDiagnostic/tools/diagnostic/tpl/result',\n    'tpl!taoClientDiagnostic/tools/diagnostic/tpl/details',\n    'tpl!taoClientDiagnostic/tools/diagnostic/tpl/feedback',\n    'tpl!taoClientDiagnostic/tools/diagnostic/tpl/quality-bar',\n    'css!taoClientDiagnosticCss/diagnostics'\n], function(\n    $,\n    _,\n    __,\n    async,\n    component,\n    loggerFactory,\n    store,\n    request,\n    requestData,\n    dialogAlert,\n    feedback,\n    urlHelper,\n    performancesTester,\n    bandwidthTester,\n    uploadTester,\n    browserTester,\n    getStatus,\n    getConfig,\n    mainTpl,\n    resultTpl,\n    detailsTpl,\n    feedbackTpl,\n    qualityBarTpl\n) {\n    'use strict';\n    /**\n     * @type {logger}\n     * @private\n     */\n    const logger = loggerFactory('taoClientDiagnostic/diagnostic');\n\n    /**\n     * Some default values\n     * @type {object}\n     * @private\n     */\n    const _defaults = {\n        title: __('System Compatibility'),\n        header: __(\n            'This tool will run a number of tests in order to establish how well your current environment is suitable to run the TAO platform.'\n        ),\n        info: __('Be aware that these tests will take up to several minutes.'),\n        button: __('Test system compatibility'),\n        actionStore: 'storeData',\n        actionSchool: 'schoolName',\n        controller: 'DiagnosticChecker',\n        extension: 'taoClientDiagnostic',\n        actionDropId: 'deleteId',\n        storeAllRuns: false,\n        configurableText: {}\n    };\n\n    /**\n     * A list of thresholds for summary\n     * @type {Array}\n     * @private\n     */\n    const _thresholds = [\n        {\n            threshold: 0,\n            message: __('Your system requires a compatibility update, please contact your system administrator.'),\n            type: 'error'\n        },\n        {\n            threshold: 33,\n            message: __('Your system is not optimal, please contact your system administrator.'),\n            type: 'warning'\n        },\n        {\n            threshold: 66,\n            message: __('Your system is fully compliant.'),\n            type: 'success'\n        }\n    ];\n\n    /**\n     * Defines a diagnostic tool\n     * @type {object}\n     */\n    const diagnostic = {\n        /**\n         * Updates the displayed status\n         * @param {string} status\n         * @returns {diagnostic}\n         * @private\n         */\n        changeStatus(status) {\n            if (this.is('rendered')) {\n                this.controls.$status.html(status);\n            }\n            return this;\n        },\n\n        /**\n         * Sends the detailed stats to the server\n         * @param {string} type The type of stats\n         * @param {object} data The stats details\n         * @param {Function} done A callback method called once server has responded\n         */\n        store(type, data, done) {\n            const config = this.config;\n            const url = urlHelper.route(config.actionStore, config.controller, config.extension, config.storeParams);\n\n            data = _.omit(data, 'values');\n            data.type = type;\n\n            request({ url, data, method: 'POST', noToken: true })\n                .then(done)\n                .catch(err => {\n                    logger.error(err);\n                    feedback().error(__('Unable to save the results! Please check your connection.'));\n                    done();\n                });\n        },\n\n        /**\n         * Retrieve a custom message from the config\n         * @param key\n         * @returns {*}\n         */\n        getCustomMsg(key) {\n            return this.config.configurableText[key];\n        },\n\n        /**\n         * Enrich the feedback object with a custom message if the test has failed\n         * @param {object} status - the test result\n         * @param {string} msg - the custom message\n         */\n        addCustomFeedbackMsg(status, msg) {\n            if (this.hasFailed(status) && msg) {\n                if (_.isFunction(status.customMsgRenderer)) {\n                    msg = status.customMsgRenderer(msg);\n                }\n                status.feedback = status.feedback || {};\n                status.feedback.customMsg = msg;\n            }\n        },\n\n        /**\n         * Check if a result is considered as failed\n         * @param {object} result\n         * @returns {boolean}\n         */\n        hasFailed(result) {\n            return !(result && result.feedback && result.feedback.type === 'success');\n        },\n\n        /**\n         * Add a result row\n         * @param {object} result\n         * @returns {diagnostic}\n         */\n        addResult(result) {\n            if (this.is('rendered')) {\n                // adjust the width of the displayed label, if any, to the text length\n                if (result.quality && result.quality.label && result.quality.label.toString().length > 2) {\n                    result.quality.wide = true;\n                }\n\n                // create and append the result to the displayed list\n                const $main = $(resultTpl(result));\n                const $result = $main.find('.result');\n                if (result.feedback) {\n                    $result.append($(feedbackTpl(result.feedback)));\n                }\n                if (result.quality) {\n                    $result.append($(qualityBarTpl(result.quality)));\n                }\n                if (result.details) {\n                    $main.find('.details').append($(detailsTpl(result.details)));\n                }\n\n                const $indicator = $main.find('.quality-indicator');\n                this.controls.$results.append($main);\n\n                // the result is hidden by default, show it with a little animation\n                $main.fadeIn(() => {\n                    if ($indicator.length) {\n                        $indicator.animate({\n                            left: (result.percentage * $main.outerWidth()) / 100 - $indicator.outerWidth() / 2\n                        });\n                    }\n                });\n            }\n\n            return this;\n        },\n\n        /**\n         * Removes the last results if any\n         * @returns {diagnostic}\n         */\n        cleanUp() {\n            this.controls.$results.empty();\n            return this;\n        },\n\n        /**\n         * Enables the start button\n         * @returns {diagnostic}\n         */\n        enable() {\n            this.controls.$start.removeClass('hidden');\n            return this;\n        },\n\n        /**\n         * Disables the start button\n         * @returns {diagnostic}\n         */\n        disable() {\n            this.controls.$start.addClass('hidden');\n            return this;\n        },\n\n        /**\n         * Does some preparations before starting the diagnostics\n         * @returns {diagnostic}\n         * @private\n         */\n        prepare() {\n            /**\n             * Notifies the diagnostic start\n             * @event diagnostic#start\n             */\n            this.trigger('start');\n            this.changeStatus(__('Starting...'));\n            this.setState('running', true);\n            this.setState('done', false);\n\n            // first we need a clean space to display the results, so remove the last results if any\n            this.cleanUp();\n\n            // remove the start button during the diagnostic\n            this.disable();\n\n            return this;\n        },\n\n        /**\n         * Does some post process after ending the diagnostics\n         * @returns {diagnostic}\n         * @private\n         */\n        finish() {\n            const config = this.config;\n\n            // restore the start button to allow a new diagnostic run\n            this.enable();\n\n            if (config.storeAllRuns) {\n                this.deleteIdentifier();\n            }\n\n            /**\n             * Notifies the diagnostic end\n             * @event diagnostic#end\n             */\n            this.trigger('end');\n            this.changeStatus(__('Done!'));\n            this.setState('running', false);\n            this.setState('done', true);\n\n            return this;\n        },\n\n        /**\n         * delete unique id for this test session (next test will generate new one)\n         */\n        deleteIdentifier() {\n            const url = urlHelper.route(this.config.actionDropId, this.config.controller, this.config.extension);\n            return request({ url, method: 'POST', noToken: true });\n        },\n\n        /**\n         * Runs the diagnostics\n         * @returns {diagnostic}\n         */\n        run() {\n            const information = [];\n            const scores = {};\n            const testers = [];\n            const customInput = this.getCustomInput();\n\n            const doRun = () => {\n                // common handling for testers\n                const doCheck = (testerConfig, cb) => {\n                    const testerId = testerConfig.id;\n\n                    /**\n                     * Notifies the start of a tester operation\n                     * @event diagnostic#starttester\n                     * @param {string} name - The name of the tester\n                     */\n                    this.trigger('starttester', testerId);\n                    this.setState(testerId, true);\n\n                    /**\n                     * Process the diagnostic from the loaded tester\n                     * @param {Function} testerFactory\n                     * @private\n                     */\n                    const processTester = testerFactory => {\n                        const tester = testerFactory(getConfig(testerConfig, this.config), this);\n                        this.changeStatus(tester.labels.status);\n                        tester.start((status, details, results) => {\n                            if (testerConfig.customMsgKey) {\n                                const customMsg = this.getCustomMsg(testerConfig.customMsgKey);\n                                this.addCustomFeedbackMsg(status, customMsg);\n                            }\n\n                            // the returned details must be ingested into the main details list\n                            _.forEach(details, info => information.push(info));\n                            scores[status.id] = status;\n\n                            /**\n                             * Notifies the end of a tester operation\n                             * @event diagnostic#endtester\n                             * @param {string} id - The identifier of the tester\n                             * @param {Array} results - The results of the test\n                             */\n                            this.trigger('endtester', testerId, status);\n                            this.setState(testerId, false);\n\n                            // results should be filtered in order to encode complex data\n                            results = _.mapValues(results, value => {\n                                switch (typeof value) {\n                                    case 'boolean':\n                                        return value ? 1 : 0;\n                                    case 'object':\n                                        return JSON.stringify(value);\n                                }\n                                return value;\n                            });\n\n                            // send the data to store\n                            this.store(testerId, results, () => {\n                                this.addResult(status);\n                                cb();\n                            });\n                        });\n                    };\n\n                    /**\n                     * React to loading failure\n                     * @param {Error} err\n                     * @private\n                     */\n                    const processFailure = err => {\n                        logger.error(err);\n                        feedback().error(\n                            __(\n                                'Unable to process with the diagnostic tester %s. The tester module is unreachable.',\n                                testerId\n                            )\n                        );\n                        cb();\n                    };\n\n                    require([testerConfig.tester], processTester, processFailure);\n                };\n\n                if (this.is('rendered')) {\n                    // set up the component to a new run\n                    this.prepare();\n\n                    _.forEach(this.config.testers, (testerConfig, testerId) => {\n                        testerConfig.id = testerConfig.id || testerId;\n                        if (testerConfig.enabled) {\n                            testers.push(cb => doCheck(testerConfig, cb));\n                        }\n                    });\n\n                    // launch each testers in series, then display the results\n                    async.series(testers, () => {\n                        // pick the lowest percentage as the main score\n                        const total = _.min(scores, 'globalPercentage');\n\n                        // get a status according to the main score\n                        const status = getStatus(total.globalPercentage, _thresholds);\n\n                        // display the result\n                        status.title = __('Total');\n                        status.id = 'total';\n                        this.addCustomFeedbackMsg(status, this.config.configurableText.diagTotalCheckResult);\n\n                        status.details = information;\n                        this.addResult(status);\n\n                        // done !\n                        this.finish();\n                    });\n                }\n            };\n\n            if (_.size(customInput) > 0) {\n                this.store('custom_input', customInput, doRun);\n            } else {\n                doRun();\n            }\n\n            return this;\n        },\n\n        getCustomInput() {\n            const vars = {};\n\n            window.location.href.replace(location.hash, '').replace(/[?&]+([^=&]+)=?([^&]*)?/gi, (m, key, value) => {\n                if (_.has(this.config['customInput'], key)) {\n                    vars[key] = typeof value !== 'undefined' ? value : '';\n                }\n            });\n\n            return vars;\n        }\n    };\n\n    /**\n     * Builds an instance of the diagnostic tool\n     * @param {object} container - Container in which the initialisation will render the diagnostic\n     * @param {object} config\n     * @param {string} [config.title] - The displayed title\n     * @param {string} [config.header] - A header text displayed to describe the component\n     * @param {string} [config.info] - An information text displayed to warn about run duration\n     * @param {string} [config.button] - The caption of the start button\n     * @param {string} [config.actionStore] - The name of the action to call to store the results\n     * @param {string} [config.actionCheck] - The name of the action to call to check the browser results\n     * @param {string} [config.actionSchool] - The name of the action to call to get the school name\n     * @param {string} [config.controller] - The name of the controller to call\n     * @param {string} [config.extension] - The name of the extension containing the controller\n     * @param {object} [config.storeParams] - A list of additional parameters to send with diagnostic results\n     * @param {boolean} [config.requireSchoolName] - If `true` require a school name to allow the tests to start\n     * @param {boolean} [config.requireSchoolId] - If `true` require a school ID to allow the tests to start\n     * @param {boolean} [config.validateSchoolName] - If `true` require a school number and a PIN to get the school name and to allow the tests to start\n     *\n     * @param {string} [config.browser.action] - The name of the action to call to get the browser checker\n     * @param {string} [config.browser.controller] - The name of the controller to call to get the browser checker\n     * @param {string} [config.browser.extension] - The name of the extension containing the controller to call to get the browser checker\n     *\n     * @param {number} [config.bandwidth.unit] - The typical bandwidth needed for a test taker (Mbps)\n     * @param {Array} [config.bandwidth.ideal] - The thresholds for optimal bandwidth, one by bar\n     * @param {number} [config.bandwidth.max] - Maximum number of test takers to display\n     *\n     * @param {Array} [config.performances.samples] - A list of samples to render in order to compute the rendering performances\n     * @param {number} [config.performances.occurrences] - The number of renderings by samples\n     * @param {number} [config.performances.timeout] - Max allowed duration for a sample rendering\n     * @param {number} [config.performances.optimal] - The threshold for optimal performances\n     * @param {number} [config.performances.threshold] - The threshold for minimal performances\n     * @returns {diagnostic}\n     */\n    return function diagnosticFactory(container, config) {\n        // fix the translations for content loaded from config files\n        if (config) {\n            _.forEach(['title', 'header', 'footer', 'info', 'button'], name => {\n                if (config[name]) {\n                    config[name] = __(config[name]);\n                }\n            });\n        }\n\n        const diagComponent = component(diagnostic, _defaults)\n            .setTemplate(mainTpl)\n\n            // uninstalls the component\n            .on('destroy', function onDiagnosticDestroy() {\n                this.controls = null;\n            })\n\n            // initialise component\n            .on('init', function onDiagnosticInit() {\n                this.render(container);\n            })\n            // renders the component\n            .on('render', function onDiagnosticRender() {\n                /**\n                 * Starts the tests\n                 * @param {object} [data]\n                 * @private\n                 */\n                const runDiagnostics = data => {\n                    // append the school name to the queries\n                    if (data && _.isPlainObject(data)) {\n                        this.config.storeParams = _.assign(this.config.storeParams || {}, data);\n                    }\n\n                    this.run();\n                };\n\n                /**\n                 * Default launcher\n                 * @private\n                 */\n                let launch = () => runDiagnostics();\n\n                /**\n                 * Gets a control by its registered name\n                 * @param {string} name - the name registered in the collection of controls\n                 * @private\n                 */\n                const getControl = name => this.controls[`\\$${name}`];\n\n                /**\n                 * Gets the value of an input field\n                 * @param {string} name - the name registered in the collection of controls\n                 * @returns {string}\n                 * @private\n                 */\n                function getInputValue(name) {\n                    const $control = getControl(name);\n                    return (($control && $control.val()) || '').trim();\n                }\n\n                /**\n                 * Sets the value of an input field\n                 * @param {string} name - the name registered in the collection of controls\n                 * @param {string} value\n                 * @private\n                 */\n                function setInputValue(name, value) {\n                    const $control = getControl(name);\n                    $control && $control.val(value);\n                }\n\n                /**\n                 * Enable/Disable a control\n                 * @param {string} name - the name registered in the collection of controls\n                 * @param {boolean} [state]\n                 * @private\n                 */\n                function toggleControl(name, state) {\n                    const $control = getControl(name);\n                    if ($control) {\n                        if (typeof state === 'undefined') {\n                            state = !$control.is(':enabled');\n                        }\n                        if (state) {\n                            $control.prop('disabled', false);\n                        } else {\n                            $control.prop('disabled', true);\n                        }\n                    }\n                }\n\n                /**\n                 * Requests the server to get the school name\n                 * @param {object} values\n                 * @private\n                 */\n                const requestSchoolName = values => {\n                    const componentConfig = this.config;\n                    return requestData(\n                        urlHelper.route(\n                            componentConfig.actionSchool,\n                            componentConfig.controller,\n                            componentConfig.extension\n                        ),\n                        values,\n                        'POST'\n                    ).then(data => {\n                        return {\n                            school_name: data,\n                            school_number: values.school_number\n                        };\n                    });\n                };\n\n                /**\n                 * Install the school name manager.\n                 * @todo: improve this by moving it into a plugin, and obviously implement the plugin handling\n                 * @private\n                 */\n                const manageSchoolProperties = (fields, validate) => {\n                    /**\n                     * Checks if the start button can be enabled\n                     * @returns {boolean}\n                     * @private\n                     */\n                    function toggleStart() {\n                        const allow = _.every(fields, getInputValue);\n                        toggleControl('start', allow);\n                        return allow;\n                    }\n\n                    /**\n                     * Enables/Disables the fields\n                     * @param {boolean} state\n                     * @private\n                     */\n                    function toggleFields(state) {\n                        _.forEach(fields, function(fieldName) {\n                            toggleControl(fieldName, state);\n                        });\n                    }\n\n                    // ensure the diagnostic cannot start without all fields properly input\n                    _.forEach(fields, fieldName => {\n                        this.controls[`\\$${fieldName}`] = this.getElement()\n                            .find(`[data-control=\"${fieldName}\"]`)\n                            .on('keypress', e => {\n                                const shouldStart = e.which === 13;\n                                if (shouldStart) {\n                                    e.preventDefault();\n                                }\n                                _.defer(() => {\n                                    if (toggleStart() && shouldStart) {\n                                        this.controls.$start.click();\n                                    }\n                                });\n                            });\n                    });\n\n                    toggleStart();\n\n                    // will store the school name in the browser storage, that will allow to restore it next time\n                    toggleFields(false);\n                    store('client-diagnostic')\n                        .then(storage => {\n                            // store the school name on test start, to ensure consistency\n                            this.on('start.school', () => {\n                                _.forEach(fields, fieldName => {\n                                    storage.setItem(fieldName, getInputValue(fieldName)).catch(error => {\n                                        logger.error(error);\n                                    });\n                                });\n                            });\n\n                            // restore the school name on load\n                            return Promise.all(\n                                _.map(fields, fieldName => {\n                                    return storage.getItem(fieldName).then(value => {\n                                        setInputValue(fieldName, value);\n                                    });\n                                })\n                            );\n                        })\n                        .catch(error => {\n                            logger.error(error);\n                        })\n                        .then(() => {\n                            toggleFields(true);\n                            toggleStart();\n                        });\n\n                    // ensure the fields are validated and the school name is properly sent before allowing to launch the test\n                    launch = () => {\n                        const values = _.reduce(\n                            fields,\n                            (result, fieldName) => {\n                                result[fieldName] = getInputValue(fieldName);\n                                return result;\n                            },\n                            {}\n                        );\n\n                        this.changeStatus(__('Getting school name...'))\n                            .cleanUp()\n                            .disable();\n\n                        if (_.isFunction(validate)) {\n                            validate(values)\n                                .then(runDiagnostics)\n                                .catch(error => {\n                                    const response = error.response || {};\n                                    const message =\n                                        response.errorMsg ||\n                                        response.errorMessage ||\n                                        __('An error occurred! Please verify your input!');\n                                    dialogAlert(message);\n                                    logger.error(error);\n                                    this.changeStatus(__('Failed to get school name')).enable();\n                                });\n                        } else {\n                            runDiagnostics(values);\n                        }\n                    };\n\n                    // ensure the fields are not writable while the test is running\n                    this.on('start.school', () => {\n                        toggleFields(false);\n                    }).on('end.school', () => {\n                        toggleFields(true);\n                    });\n                };\n\n                // get access to all needed placeholders\n                this.controls = {\n                    $start: this.$component.find('[data-action=\"test-launcher\"]'),\n                    $status: this.$component.find('.status h2'),\n                    $results: this.$component.find('.results')\n                };\n\n                // start the diagnostic\n                this.controls.$start.on('click', () => {\n                    this.controls.$start.is(':enabled') && launch();\n                });\n\n                if (this.config.requireSchoolName) {\n                    if (this.config.validateSchoolName) {\n                        manageSchoolProperties(['school_number', 'school_pin'], requestSchoolName);\n                    } else {\n                        manageSchoolProperties(['school_name']);\n                    }\n                }\n\n                if (this.config.requireSchoolId) {\n                    manageSchoolProperties(['school_id', 'workstation']);\n                }\n\n                // show result details\n                this.controls.$results.on('click', 'button[data-action=\"show-details\"]', function onShowDetails() {\n                    const $btn = $(this).closest('button');\n                    const $result = $btn.closest('[data-result]');\n                    const $details = $result.find('.details');\n                    $details.removeClass('hidden');\n                    $btn.addClass('hidden');\n                    $result.find('[data-action=\"hide-details\"]').removeClass('hidden');\n                });\n\n                // hide result details\n                this.controls.$results.on('click', 'button[data-action=\"hide-details\"]', function onHideDetails() {\n                    const $btn = $(this).closest('button');\n                    const $result = $btn.closest('[data-result]');\n                    const $details = $result.find('.details');\n                    $details.addClass('hidden');\n                    $btn.addClass('hidden');\n                    $result.find('[data-action=\"show-details\"]').removeClass('hidden');\n                });\n            });\n\n        _.defer(() => diagComponent.init(config));\n\n        return diagComponent;\n    };\n});\n\n","\n(function(c){var d=document,a='appendChild',i='styleSheet',s=d.createElement('style');s.type='text/css';d.getElementsByTagName('head')[0][a](s);s[i]?s[i].cssText=c:s[a](d.createTextNode(c));})\n('.diagnostics-content-area{max-width:768px;margin:40px auto 40px auto}.diagnostics-main-area{margin:40px auto 0 auto;background:#f3f1ef;border:1px solid #ddd;border-radius:2px;-webkit-border-radius:2px;padding:20px}.diagnostics-main-area h1,.diagnostics-main-area h2,.diagnostics-main-area h3{font-style:normal;font-family:\\\"Source Sans Pro\\\",sans-serif}.diagnostics-main-area h1{margin-bottom:20px;font-size:20px;font-size:2rem}.diagnostics-main-area h2{margin:0;font-size:14px;font-size:1.4rem}.diagnostics-main-area h3{margin-top:10px;margin-bottom:5px;font-size:12px;font-size:1.2rem}.diagnostics-main-area .status h2,.diagnostics-main-area .details h2{margin:1rem 0}.diagnostics-main-area .legend{font-style:italic;font-weight:normal;font-family:\\\"Source Sans Pro\\\",sans-serif;font-size:11px;font-size:1.1rem}.diagnostics-main-area .customMsg{margin-top:10px}.diagnostics-main-area .quality-bar{height:15px;background:linear-gradient(to right, #CE1431 0%, #D57915 25%, #D5A215 50%, #D5CB15 75%, #36B111 100%);opacity:.8;-moz-border-radius:2px;-webkit-border-radius:2px;border-radius:2px;margin:5px 0 10px;position:relative}.diagnostics-main-area .quality-indicator{position:absolute;border-width:10px 8px;border-style:solid;border-color:#333 transparent transparent;top:-1px;height:25px;width:0}.diagnostics-main-area .quality-indicator[title]:before{font-size:11px;font-size:1.1rem;content:attr(title);position:absolute;top:-36px;left:-12px;text-align:center;width:24px;height:24px;line-height:24px;display:inline-block;background-color:#0e5d91;color:rgba(255,255,255,0.9);-moz-border-radius:12px;-webkit-border-radius:12px;border-radius:12px}.diagnostics-main-area .quality-indicator.wide[title]:before{left:-16px;width:32px}.diagnostics-main-area [data-result],.diagnostics-main-area .bandwidth-box{display:none}.diagnostics-main-area [data-action=bandwidth-launcher]{margin:5px 0 10px}.diagnostics-main-area li{padding-bottom:10px}.diagnostics-main-area .intro{margin-bottom:20px}.diagnostics-main-area .intro label{display:inline-block;width:150px}table.datatable [class^=\\\"icon-\\\"]{padding:0}table.datatable td{font-size:90%;font-weight:normal}table.datatable .progress .state:not(:first-child):before{content:\\' - \\'}table.datatable .progress .item-time:before{content:\\' (\\'}table.datatable .progress .item-time .total:before{content:\\' / \\'}table.datatable .progress .item-time:after{content:\\')\\'}.details table.matrix{border:1px solid #ddd;border-radius:2px;-webkit-border-radius:2px;margin-top:5px}.details table.matrix td:first-child{min-width:30%}.diagnostic-scope h1{font-family:\\\"Source Sans Pro\\\",sans-serif;font-size:22px;font-size:2.2rem;font-weight:normal}.diagnostic-scope h2{font-family:\\\"Source Sans Pro\\\",sans-serif;font-size:18px;font-size:1.8rem;margin:30px 0 10px}.diagnostic-scope form.daterange label{padding:0}.diagnostic-scope form.daterange input{margin:0 10px}.diagnostic-scope table.datatable [class^=\\\"icon-\\\"]{padding:0}.diagnostic-scope table.datatable td{font-size:90%;font-weight:normal}.diagnostic-scope .content{margin:auto}.diagnostic-scope .diagnostic-index .content,.diagnostic-scope .diagnostic-runner .content{width:100%}.diagnostic-scope .diagnostic-index .message,.diagnostic-scope .diagnostic-runner .message{padding:8px;text-align:center}.diagnostic-scope .panel .action-bar{background:#266d9c;padding:3px;overflow:hidden;color:#e7eff4}.diagnostic-scope .panel .action-bar .btn-info{overflow:hidden;background:transparent;border:1px rgba(255,255,255,0.3) solid}.diagnostic-scope .diagnostics-main-area{margin-top:0px;max-width:800px}.diagnostic-scope .detailed-value{display:flex;justify-content:space-between}.diagnostic-scope .detailed-value.errors{color:#d8ae5b}.diagnostic-scope .detailed-value .details{font-size:2rem;cursor:pointer;color:#3e7da7}.diagnostic-scope .detailed-value .details:hover{color:#03131d}.action-bar .tool-exitButton,.action-bar [data-control=\\\"exitButton\\\"]{float:right}\\n\\n/*# sourceMappingURL=../../../taoClientDiagnostic/views/css/diagnostics.css.map */');\n","\ndefine(\"taoClientDiagnostic/loader/diagnostic.bundle\", function(){});\n","window.bundles = (window.bundles || []).concat([\"taoQtiItem/loader/taoQtiItem.min\",\"taoItems/loader/taoItems.min\"]);\n"]}